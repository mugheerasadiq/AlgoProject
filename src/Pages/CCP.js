import React, { useState, useEffect } from "react";
import GenerateTestCase from "../functions/TestCase4579";
import { Table, Button } from "antd";
import SaveTestCase from "../functions/saveTestCase";

// Function to find the minimum number of coins required
// to get total of N from set S
function findMinCoins(S, n, N) {
  console.log(S);
  // T[i] stores minimum number of coins needed to get total of i
  let T = new Array(n + 1);

  T[0] = 0; // 0 coins are needed to get total of i

  for (let i = 1; i <= N; i++) {
    // initialize minimum number of coins needed to infinity
    T[i] = +2147483647;
    let res = +2147483647;

    // do for each coin
    for (let c = 0; c < n; c++) {
      // check if index doesn't become negative by including
      // current coin c
      if (i - S[c] >= 0) res = T[i - S[c]];

      // if total can be reached by including current coin c,
      // update minimum number of coins needed T[i]
      if (res != +2147483647) T[i] = Math.min(T[i], res + 1);
    }
  }

  // T[N] stores the minimum number of coins needed to get total of N
  return T[N];
}

const CCP = () => {
  const columns = [
    {
      title: "Randomly generated Array",
      dataIndex: "testcase",
      width: 100,
      ellipsis: true,
    },
    {
      title: "Output for TestCase",
      dataIndex: "Output",
      fixed: "right",
      width: 50,
    },
  ];

  const [dataSource, setDataSource] = useState([]);
  const [globalTestCase, setGlobalTestCase] = useState([]);
  const [tempCase, settempCase] = useState(``);

  useEffect(() => {
    const updateSource = [...dataSource];
    const updateTestCase = [...globalTestCase];
    let TempTestcase = ``;

    for (let i = 0; i < 10; i++) {
      let testcase = GenerateTestCase();

      updateTestCase.push(testcase[1]);

      updateSource.push({
        testcase: testcase[0],
        Output: "",
        key: i,
      });

      TempTestcase = `${TempTestcase} ${testcase[1]} \n`;
    }
    setGlobalTestCase(updateTestCase);
    setDataSource(updateSource);
    settempCase(TempTestcase);
  }, []);

  return (
    <div>
      <h1 style={{ textAlign: "center" }}>Coin Change Problem</h1>
      <p>
        Note: Please select the row to generate the output for a particular test
        case. The below test cases are randomly generated by using a function.
      </p>
      <Button
        style={{ marginLeft: 5, marginBottom: 10 }}
        type="primary"
        onClick={() => {
          return SaveTestCase(tempCase, "CCPTestCase.txt", "text/plain");
        }}
      >
        Download Test Cases
      </Button>

      <Table
        columns={columns}
        dataSource={dataSource}
        onRow={(record) => ({
          onClick: () => {
            let newOutput;

            newOutput = findMinCoins(
              globalTestCase[record.key],
              globalTestCase[record.key].length,
              296
            );

            let updatedSource = [...dataSource];

            updatedSource = updatedSource.map((item) => {
              if (item.testcase === record.testcase) {
                return {
                  ...record,
                  Output: newOutput,
                };
              } else {
                return item;
              }
            });
            setDataSource(updatedSource);
          },
        })}
      />
    </div>
  );
};

export default CCP;
