import React, { useState, useEffect } from "react";
import GenerateTestCase from "../functions/TestCase4579";
import { Table, Button } from "antd";
import SaveTestCase from "../functions/saveTestCase";

/* lis() returns the length of the longest   
  increasing subsequence in arr[] of size n */
function calcLIS(arr, n) {
  let lis = new Array(n);

  lis[0] = 1;

  /* Compute optimized LIS values in  
       bottom up manner */
  for (let i = 1; i < n; i++) {
    lis[i] = 1;
    for (let j = 0; j < i; j++)
      if (arr[i] > arr[j] && lis[i] < lis[j] + 1) lis[i] = lis[j] + 1;
  }

  // Return maximum value in lis[]
  return Math.max(...lis);
}

const LIS = () => {
  const columns = [
    {
      title: "Randomly generated Array",
      dataIndex: "testcase",
      width: 100,
      ellipsis: true,
    },
    {
      title: "Output for TestCase",
      dataIndex: "Output",
      fixed: "right",
      width: 50,
    },
  ];

  const [dataSource, setDataSource] = useState([]);
  const [globalTestCase, setGlobalTestCase] = useState([]);
  const [tempCase, settempCase] = useState(``);

  useEffect(() => {
    const updateSource = [...dataSource];
    const updateTestCase = [...globalTestCase];
    let TempTestcase = ``;

    for (let i = 0; i < 10; i++) {
      let testcase = GenerateTestCase();

      updateTestCase.push(testcase[1]);

      updateSource.push({
        testcase: testcase[0],
        Output: "",
        key: i,
      });

      TempTestcase = `${TempTestcase} ${testcase[1]} \n`;
    }
    setGlobalTestCase(updateTestCase);
    setDataSource(updateSource);
    settempCase(TempTestcase);
  }, []);

  return (
    <div>
      <h1 style={{ textAlign: "center" }}>Longest Increasing Subsequence</h1>
      <p>
        Note: Please select the row to generate the output for a particular test
        case. The below test cases are randomly generated by using a function.
      </p>
      <Button
        style={{ marginLeft: 5, marginBottom: 10 }}
        type="primary"
        onClick={() => {
          return SaveTestCase(tempCase, "LISTestCase.txt", "text/plain");
        }}
      >
        Download Test Cases
      </Button>

      <Table
        columns={columns}
        dataSource={dataSource}
        onRow={(record) => ({
          onClick: () => {
            let newOutput;

            newOutput = calcLIS(
              globalTestCase[record.key],
              globalTestCase[record.key].length
            );

            let updatedSource = [...dataSource];

            updatedSource = updatedSource.map((item) => {
              if (item.testcase === record.testcase) {
                return {
                  ...record,
                  Output: newOutput,
                };
              } else {
                return item;
              }
            });
            setDataSource(updatedSource);
          },
        })}
      />
    </div>
  );
};

export default LIS;
