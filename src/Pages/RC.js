import React, { useState, useEffect } from "react";
import GenerateTestCase from "../functions/TestCase68";
import { Table, Button } from "antd";
import SaveTestCase from "../functions/saveTestCase";

function rodCut(price, n) {
  console.log(price);
  console.log(n);
  let val = new Array(n + 1);
  val[0] = 0;
  let i, j;

  // Build the table val[] in bottom up manner and return the last entry
  // from the table
  for (i = 1; i <= n; i++) {
    let max_val = -2147483648;
    for (j = 0; j < i; j++)
      max_val = Math.max(max_val, price[j] + val[i - j - 1]);
    val[i] = max_val;
  }

  return val[n];
}

const RC = () => {
  const columns = [
    {
      title: "Length",
      dataIndex: "weight",
      width: 150,
    },
    {
      title: "Price",
      dataIndex: "value",
      width: 150,
    },
    {
      title: "Output for TestCase",
      dataIndex: "Output",
      fixed: "right",
      width: 50,
    },
  ];

  const [dataSource, setDataSource] = useState([]);
  const [globalTestCase, setGlobalTestCase] = useState([]);
  const [tempCase, settempCase] = useState(``);

  useEffect(() => {
    const updateSource = [...dataSource];
    const updateTestCase = [...globalTestCase];
    let TempTestcase = ``;

    for (let i = 0; i < 10; i++) {
      let testcase = GenerateTestCase();

      updateTestCase.push(testcase[3]);

      updateSource.push({
        weight: testcase[0],
        value: testcase[2],
        Output: "",
        key: i,
      });

      TempTestcase = `${TempTestcase} Weight: ${testcase[1]} Values: ${testcase[3]} \n`;
    }
    setGlobalTestCase(updateTestCase);
    setDataSource(updateSource);
    settempCase(TempTestcase);
  }, []);

  return (
    <div>
      <h1 style={{ textAlign: "center" }}>Rod cutting Problem</h1>
      <p>
        Note: Please select the row to generate the output for a particular test
        case. The below test cases are randomly generated by using a function.
        <br />
        Total Rod length: 20
      </p>

      <Button
        style={{ marginLeft: 5, marginBottom: 10 }}
        type="primary"
        onClick={() => {
          return SaveTestCase(tempCase, "RCTestCase.txt", "text/plain");
        }}
      >
        Download Test Cases
      </Button>

      <Table
        columns={columns}
        dataSource={dataSource}
        onRow={(record) => ({
          onClick: () => {
            let newOutput;

            newOutput = rodCut(globalTestCase[record.key], 20);

            let updatedSource = [...dataSource];

            updatedSource = updatedSource.map((item) => {
              if (item.key === record.key) {
                return {
                  ...record,
                  Output: newOutput,
                };
              } else {
                return item;
              }
            });
            setDataSource(updatedSource);
          },
        })}
      />
    </div>
  );
};

export default RC;
