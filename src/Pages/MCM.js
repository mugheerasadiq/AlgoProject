import React, { useState, useEffect } from "react";
import GenerateTestCase from "../functions/TestCase4579";
import { Table, Button } from "antd";
import SaveTestCase from "../functions/saveTestCase";

// Function to find the most efficient way to multiply
// given sequence of matrices
function MatrixChainMultiplication(dims, n) {
  // c[i,j] = Minimum number of scalar multiplications (i.e., cost)
  // needed to compute the matrix M[i]M[i+1]...M[j] = M[i..j]
  // The cost is zero when multiplying one matrix
  let c = new Array(n + 1);

  for (let counter = 0; counter < c.length; counter++) {
    c[counter] = new Array(n + 1);
  }

  for (let i = 1; i <= n; i++) c[i][i] = 0;

  for (
    let len = 2;
    len <= n;
    len++ // Subsequence lengths
  ) {
    for (let i = 1; i <= n - len + 1; i++) {
      let j = i + len - 1;
      c[i][j] = 2147483647;

      for (let k = i; j < n && k <= j - 1; k++) {
        let cost = c[i][k] + c[k + 1][j] + dims[i - 1] * dims[k] * dims[j];

        if (cost < c[i][j]) c[i][j] = cost;
      }
    }
  }
  return c[1][n - 1];
}

const MCM = () => {
  const columns = [
    {
      title: "Randomly generated Array",
      dataIndex: "testcase",
      width: 200,
    },
    {
      title: "Output for TestCase",
      dataIndex: "Output",
      fixed: "right",
      width: 50,
    },
  ];

  const [dataSource, setDataSource] = useState([]);
  const [globalTestCase, setGlobalTestCase] = useState([]);
  const [tempCase, settempCase] = useState(``);

  useEffect(() => {
    const updateSource = [...dataSource];
    const updateTestCase = [...globalTestCase];
    let TempTestcase = ``;

    for (let i = 0; i < 10; i++) {
      let testcase = GenerateTestCase();

      updateTestCase.push(testcase[1]);

      updateSource.push({
        testcase: testcase[0],
        Output: "",
        key: i,
      });

      TempTestcase = `${TempTestcase} ${testcase[1]} \n`;
    }
    setGlobalTestCase(updateTestCase);
    setDataSource(updateSource);
    settempCase(TempTestcase);
  }, []);

  return (
    <div>
      <h1 style={{ textAlign: "center" }}>Matrix Chain Multiplication</h1>
      <p>
        Note: Please select the row to generate the output for a particular test
        case. The below test cases are randomly generated by using a function.
      </p>

      <Button
        style={{ marginLeft: 5, marginBottom: 10 }}
        type="primary"
        onClick={() => {
          return SaveTestCase(tempCase, "MCMTestCase.txt", "text/plain");
        }}
      >
        Download Test Cases
      </Button>

      <Table
        columns={columns}
        dataSource={dataSource}
        onRow={(record) => ({
          onClick: () => {
            let newOutput;

            newOutput = MatrixChainMultiplication(
              globalTestCase[record.key],
              globalTestCase[record.key].length
            );

            let updatedSource = [...dataSource];

            updatedSource = updatedSource.map((item) => {
              if (item.testcase === record.testcase) {
                return {
                  ...record,
                  Output: newOutput,
                };
              } else {
                return item;
              }
            });
            setDataSource(updatedSource);
          },
        })}
      />
    </div>
  );
};

export default MCM;
