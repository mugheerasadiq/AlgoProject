import React, { useState, useEffect } from "react";
import GenerateTestCase from "../functions/TestCase4579";
import { Table } from "antd";

// Return true if there exists a subset of array[0..n) with given sum
function subsetSum(arr, n, sum) {
  // T[i][j] stores true if subset with sum j can be attained with
  // using items up to first i items
  let T = new Array(n + 1);

  for (let i = 0; i < n + 1; i++) {
    T[i] = new Array(sum + 1);
  }
  // if 0 items in the list and sum is non-zero
  for (let j = 1; j <= sum; j++) T[0][j] = false;

  // if sum is zero
  for (let i = 0; i <= n; i++) T[i][0] = true;

  // do for ith item
  for (let i = 1; i <= n; i++) {
    // consider all sum from 1 to sum
    for (let j = 1; j <= sum; j++) {
      // don't include ith element if j-arr[i-1] is negative
      if (arr[i - 1] > j) T[i][j] = T[i - 1][j];
      // find subset with sum j by excluding or including the ith item
      else T[i][j] = T[i - 1][j] || T[i - 1][j - arr[i - 1]];
    }
  }

  // return maximum value
  return T[n][sum];
}

// Partition problem - Return true if given array arr[0..n-1] can
// be divided into two subsets with equal sum
function partition(arr, n) {
  let sum = 0;
  for (let i = 0; i < n; i++) sum += arr[i];

  // return true if sum is even and array can can be divided into
  // two subsets with equal sum
  return !(sum & 1) && subsetSum(arr, n, sum / 2);
}

const PP = () => {
  const columns = [
    {
      title: "Randomly generated Array",
      dataIndex: "testcase",
      width: 100,
      ellipsis: true,
    },
    {
      title: "Output for TestCase",
      dataIndex: "Output",
      fixed: "right",
      width: 50,
    },
  ];

  const [dataSource, setDataSource] = useState([]);
  const [globalTestCase, setGlobalTestCase] = useState([]);

  useEffect(() => {
    const updateSource = [...dataSource];
    const updateTestCase = [...globalTestCase];

    for (let i = 0; i < 10; i++) {
      let testcase = GenerateTestCase();

      updateTestCase.push(testcase[1]);

      updateSource.push({
        testcase: testcase[0],
        Output: "",
        key: i,
      });
    }
    setGlobalTestCase(updateTestCase);
    setDataSource(updateSource);
  }, []);

  return (
    <div>
      <h1 style={{ textAlign: "center" }}>Partition Problem</h1>
      <p>
        Note: Please select the row to generate the output for a particular test
        case. The below test cases are randomly generated by using a function.
      </p>

      <Table
        columns={columns}
        dataSource={dataSource}
        onRow={(record) => ({
          onClick: () => {
            let newOutput;

            // Function call
            if (
              partition(
                globalTestCase[record.key],
                globalTestCase[record.key].length
              ) == true
            )
              newOutput = "True";
            else newOutput = "False";

            let updatedSource = [...dataSource];

            updatedSource = updatedSource.map((item) => {
              if (item.testcase === record.testcase) {
                return {
                  ...record,
                  Output: newOutput,
                };
              } else {
                return item;
              }
            });
            setDataSource(updatedSource);
          },
        })}
      />
    </div>
  );
};

export default PP;
