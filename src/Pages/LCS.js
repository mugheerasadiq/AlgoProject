import React, { useState, useEffect } from "react";
import GenerateTestCase from "../functions/TestCase123";
import { Table } from "antd";

function getLcsLengths(str1, str2) {
  var result = [];
  for (var i = -1; i < str1.length; i = i + 1) {
    result[i] = [];
    for (var j = -1; j < str2.length; j = j + 1) {
      if (i === -1 || j === -1) {
        result[i][j] = 0;
      } else if (str1[i] === str2[j]) {
        result[i][j] = result[i - 1][j - 1] + 1;
      } else {
        result[i][j] = Math.max(result[i - 1][j], result[i][j - 1]);
      }
    }
  }
  return result;
}

function getLcs(str1, str2, lcsLengthsMatrix) {
  var execute = function (i, j) {
    if (!lcsLengthsMatrix[i][j]) {
      return "";
    } else if (str1[i] === str2[j]) {
      return execute(i - 1, j - 1) + str1[i];
    } else if (lcsLengthsMatrix[i][j - 1] > lcsLengthsMatrix[i - 1][j]) {
      return execute(i, j - 1);
    } else {
      return execute(i - 1, j);
    }
  };
  return execute(str1.length - 1, str2.length - 1);
}

const LCS = () => {
  const columns = [
    {
      title: "String 1",
      dataIndex: "String1",
      width: 150,
      ellipsis: true,
    },
    {
      title: "String 2",
      dataIndex: "String2",
      width: 150,
    },
    {
      title: "Output for TestCase",
      dataIndex: "Output",
      fixed: "right",
      width: 50,
    },
  ];

  const [dataSource, setDataSource] = useState([]);

  useEffect(() => {
    const updateSource = [...dataSource];
    for (let i = 0; i < 10; i++) {
      let String1 = GenerateTestCase();
      let String2 = GenerateTestCase();
      updateSource.push({
        String1: String1,
        String2: String2,
        Output: "",
      });
    }

    setDataSource(updateSource);
  }, []);

  return (
    <div>
      <h1 style={{ textAlign: "center" }}>Longest Common Subsequence</h1>
      <p>
        Note: Please select the row to generate the output for a particular test
        case. The below test cases are randomly generated by using a function.
      </p>
      <Table
        columns={columns}
        dataSource={dataSource}
        onRow={(record) => ({
          onClick: () => {
            let newOutput;

            var lcsLengthsMatrix = getLcsLengths(
              record.String1,
              record.String2
            );

            newOutput = getLcs(record.String1, record.String2, lcsLengthsMatrix)
              .length;

            let updatedSource = [...dataSource];

            updatedSource = updatedSource.map((item) => {
              if (item.String1 === record.String1) {
                return {
                  ...record,
                  Output: newOutput,
                };
              } else {
                return item;
              }
            });
            setDataSource(updatedSource);
          },
        })}
      />
    </div>
  );
};

export default LCS;
